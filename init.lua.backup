-- Source the existing Vimscript configuration
vim.cmd("source ~/.config/nvim/base_init.vim")

-- Initialize lazy.nvim
vim.opt.rtp:prepend("~/.local/share/nvim/lazy/lazy.nvim")

-- set tab width and indent size to 2 spaces
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.expandtab = true
vim.opt.smartindent = true
vim.opt.autoindent = true

-- Remap indenting in visual mode to stay in visual mode
vim.api.nvim_set_keymap("v", "<", "<gv", { noremap = true, silent = true })
vim.api.nvim_set_keymap("v", ">", ">gv", { noremap = true, silent = true })

-- Initialize lazy.nvim and set up plugins
require("lazy").setup({
	-- nvim-treesitter for advanced syntax highlighting
	{
		"nvim-treesitter/nvim-treesitter",
		build = ":TSUpdate",
		config = function()
			require("nvim-treesitter.configs").setup({
				ensure_installed = { "javascript", "html", "css", "php", "python", "cpp" }, -- Add more languages as needed
				highlight = {
					enable = true, -- Enable Treesitter-based syntax highlighting
					additional_vim_regex_highlighting = false, -- Disable regex-based highlighting
				},
			})
		end,
	},

	-- Neo-Tree and dependencies
	{
		"nvim-neo-tree/neo-tree.nvim",
		branch = "v3.x",
		dependencies = {
			"nvim-lua/plenary.nvim",
			"nvim-tree/nvim-web-devicons", -- Icons
			"MunifTanjim/nui.nvim",
		},
		config = function()
			require("neo-tree").setup({
				-- Add any Neo-Tree-specific configuration here
				auto_clean_after_session_restore = true,
				enable_git_status = true,
				enable_diagnostics = true,
				default_component_configs = {
					icon = {
						folder_closed = "",
						folder_open = "",
						folder_empty = "",
						default = "",
					},
				},
			})
		end,
	},
	{
		"nvim-telescope/telescope.nvim",
		dependencies = { "nvim-lua/plenary.nvim" },
		config = function()
			require("telescope").setup({
				defaults = {
					file_ignore_patterns = { "node_modules", ".git" },
				},
			})
		end,
	},
	{
		"github/copilot.vim",
		config = function()
			vim.g.copilot_no_tab_map = true -- Disable default tab mapping
		end,
	},

	{
		"stevearc/conform.nvim",
	},

	{
		"numToStr/Comment.nvim",
		config = function()
			require("Comment").setup()
		end,
	},

	-- Theme plugins
	{ "sainnhe/gruvbox-material" },
	{ "navarasu/onedark.nvim" }, -- OneDark theme plugin
	{ "folke/tokyonight.nvim" },
	{ "catppuccin/nvim" },
})

require("catppuccin").setup({
	transparent_background = true,
})

-- Set up function to manage theme application without re-initializing lazy.nvim
local function apply_theme(theme_name)
	vim.cmd("colorscheme " .. theme_name)
end

-- Apply the desired theme
apply_theme("catppuccin") -- Current theme applied

require("conform").setup({
	formatters_by_ft = {
		javascript = { "prettier" },
		typescript = { "prettier" },
		json = { "prettier" },
		php = { "php-cs-fixer" },
		python = { "black" },
		cpp = { "clang-format" },
		lua = { "stylua" },
	},
	formatters = {
		["stylua"] = {
			command = "stylua",
			args = { "--config-path", vim.fn.expand("~/.config/stylua.toml"), "-" },
			stdin = true,
		},
		["php-cs-fixer"] = {
			command = "/Users/kevingarubba/.composer/vendor/bin/php-cs-fixer",
			args = {
				"fix",
				"--config=/Users/kevingarubba/.php-cs-fixer.php",
				"$FILENAME",
			},
			stdin = false,
		},
	},
})

-- Install and configure Comment.nvim
require("Comment").setup({
	-- Optional configuration, for example, you can toggle comments using gc or gcc
	mappings = {
		-- Basic mappings for normal and visual mode
		basic = true,
		extra = true,
	},
})

-- conform.nvim custom command to format code
vim.api.nvim_create_user_command("Format", function(args)
	local range = nil
	if args.count ~= -1 then
		local end_line = vim.api.nvim_buf_get_lines(0, args.line2 - 1, args.line2, true)[1]
		range = {
			start = { args.line1, 0 },
			["end"] = { args.line2, end_line:len() },
		}
	end
	require("conform").format({ async = true, lsp_format = "fallback", range = range })
end, { range = true })

-- auto format on save
vim.api.nvim_create_autocmd("BufWritePre", {
	pattern = { "*.php", "*.js", "*.ts", "*.ts", "*.json", "*.py", "*.cpp", "*.lua" },
	callback = function()
		require("conform").format()
	end,
})

-- Function to browse and load sessions
local function load_session()
	require("telescope.builtin").find_files({
		prompt_title = "Load Session",
		cwd = vim.fn.expand("~/.config/nvim/sessions/"),
		attach_mappings = function(_, map)
			map("i", "<CR>", function(prompt_bufnr)
				local selection = require("telescope.actions.state").get_selected_entry()
				require("telescope.actions").close(prompt_bufnr)
				vim.cmd("source " .. selection.cwd .. "/" .. selection.value)
				print("Loaded session: " .. selection.value)
				vim.cmd("Neotree toggle") -- Reopen Neo-Tree to ensure it displays correctly
			end)
			return true
		end,
	})
end

-- Create a custom command to load sessions
vim.api.nvim_create_user_command("LoadSession", load_session, {})

-- Function to save the current session
local function save_session()
	-- Get the current working directory
	local cwd = vim.fn.getcwd()
	-- Get the directory name as the default session name
	local default_name = vim.fn.fnamemodify(cwd, ":t")
	-- Prompt the user to enter a session name
	local session_name = vim.fn.input("Session Name (default: " .. default_name .. "): ")

	-- If the input is blank, use the default name (current directory name)
	if session_name == "" then
		session_name = default_name
	end

	-- Construct the full path for the session file
	local session_file = "~/.config/nvim/sessions/" .. session_name .. ".vim"
	-- Save the session
	vim.cmd("mksession! " .. session_file)
	print("Session saved as: " .. session_file)
end

-- Create a custom command to save the session
vim.api.nvim_create_user_command("SaveSession", save_session, {})

-- Enable true color support
vim.opt.termguicolors = true

-- Example: Custom highlighting settings (optional)
vim.api.nvim_set_hl(0, "TSKeyword", { fg = "#ff007c", bold = true })
vim.api.nvim_set_hl(0, "TSFunction", { fg = "#00dfff", bold = true })

-- Toggle Neo-Tree with <leader>b
vim.api.nvim_set_keymap("n", "<leader>b", ":Neotree toggle<CR>", { noremap = true, silent = true })

-- Keybindings for SaveSession and LoadSession
vim.api.nvim_set_keymap("n", "<leader>ss", ":SaveSession<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>ls", ":LoadSession<CR>", { noremap = true, silent = true })

-- Map <leader>p to trigger Telescope's find_files function
vim.api.nvim_set_keymap("n", "<leader>p", ":Telescope find_files<CR>", { noremap = true, silent = true })

-- Optionally, map CMD+P for Mac users (if you're on macOS)
vim.api.nvim_set_keymap("n", "<D-p>", ":Telescope find_files<CR>", { noremap = true, silent = true })

-- Map <C-j> to accept Copilot suggestions
vim.api.nvim_set_keymap("i", "<C-j>", 'copilot#Accept("<CR>")', { noremap = true, silent = true, expr = true })

-- Keybindings for Comment.nvim
vim.api.nvim_set_keymap(
	"n",
	"<leader>/",
	'<cmd>lua require("Comment.api").toggle.linewise.current()<CR>',
	{ noremap = true, silent = true }
)
vim.api.nvim_set_keymap(
	"v",
	"<leader>/",
	'<ESC><cmd>lua require("Comment.api").toggle.linewise(vim.fn.visualmode())<CR>',
	{ noremap = true, silent = true }
)
